#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (C) 2014  Bernhard Arnold <bernhard.arnold@cern.ch>
#
# Repository path   : $HeadURL: svn://heros.hephy.oeaw.ac.at/GlobalTriggerUpgrade/software/tmc/trunk/utils/tplrcc $
# Last committed    : $Revision: 3432 $
# Last changed by   : $Author: arnold $
# Last changed date : $Date: 2014-11-13 17:01:39 +0100 (Thu, 13 Nov 2014) $
#

"""
Template resource compiler.

The textual templates are read and encoded to a base64 dictionary. This ensures
to pack many tempalte files into a single python module.

Example:
========

$ tplrcc foo.htm bar.htm rc.py

>>> from rc import rcload
>>> print rcload('foo.htm')

"""

import sys, os

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

PYTHON_MODULE_CODE = """# -*- coding: utf-8 -*-
# generated by tplrcc
# WARNING! All changes made in this file will be lost!

__all__ = ['rcload', ]

_RESOURCE_DICT = {{
{resources}
}}

def rcload(key_):
    try:
        return _RESOURCE_DICT[key_].decode('base64')
    except KeyError:
        raise KeyError("no such template '{{key_}}' in compiled resources".format(**locals()))

# eof

"""

def main():
    if len(sys.argv) < 3:
        print "usage: tplrcc <template ...> <target>"
        print "Template resource compiler"
        sys.exit(EXIT_FAILURE)

    target_filename = sys.argv[-1]
    source_filenames = sys.argv[1:-1]

    resources = []
    for filename in source_filenames:
        data = open(filename).read().encode('base64')
        key = os.path.basename(filename)
        resources.append("'{key}' :\n'''{data}''',".format(**locals()))

    open(target_filename, 'w').write(PYTHON_MODULE_CODE.format(resources = '\n'.join(resources)))

    return EXIT_SUCCESS

if __name__ == '__main__':
    sys.exit(main())

# eof
