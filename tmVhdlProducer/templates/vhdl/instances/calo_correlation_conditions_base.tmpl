{%- block calo_correlation_conditions_base %}
  {%- block entity %}
  {%- endblock entity %}
    generic map(
  {%- block generic_beg %}
  {%- endblock generic_beg %}
    {%- if condition.objects[1].is_calo_type %}
      {%- set nr_calo_obj = condition.nr_objects %}
    {%- else %}        
      {%- set nr_calo_obj = 1 %}
    {%- endif %}        
    {%- for i in range(0,nr_calo_obj) %}
      {%- set o = condition.objects[i] %}
      {%- if nr_calo_obj > 1 %}
-- object {{i+1}} cuts
        {%- if i < 2 %}
        nr_calo{{i+1}}_objects => NR_{{ o.type|upper }}_OBJECTS,       
        {%- endif %}        
        {%- if o.hasSlice is not none %}
        calo{{i+1}}_object_low => {{ o.sliceLow }}, 
        calo{{i+1}}_object_high => {{ o.sliceHigh }}, 
        {%- endif %}        
        {%- if o.operator == False %}
        pt_ge_mode_calo{{i+1}} => {{ o.operator }}, 
        {%- endif %}        
        obj_type_calo{{i+1}} => {{ o.type|upper }}_TYPE,
        pt_threshold_calo{{i+1}} => X"{{ o.threshold|X04 }}",
        {%- if o.etaNrCuts > 0 %}
        nr_eta_windows_calo{{i+1}} => {{ o.etaNrCuts }},
        {%- endif %}        
        {%- for j in range(0,(o.etaNrCuts)) %}
          {%- if o.etaNrCuts > j %}
        eta_w{{j+1}}_upper_limit_calo{{i+1}} => X"{{ o.etaUpperLimit[j]|X04 }}", 
        eta_w{{j+1}}_lower_limit_calo{{i+1}} => X"{{ o.etaLowerLimit[j]|X04 }}",
          {%- endif %}        
        {%- endfor %}
        {%- if o.phiNrCuts > 0 %}
        phi_full_range_calo{{i+1}} => {{ o.phiFullRange }}, 
        phi_w1_upper_limit_calo{{i+1}} => X"{{ o.phiW1UpperLimit|X04 }}", 
        phi_w1_lower_limit_calo{{i+1}} => X"{{ o.phiW1LowerLimit|X04 }}",
        {%- endif %}        
        {%- if o.phiNrCuts > 1 %}
        phi_w2_ignore_calo{{i+1}} => {{ o.phiW2Ignore }}, 
        phi_w2_upper_limit_calo{{i+1}} => X"{{ o.phiW2UpperLimit|X04 }}", 
        phi_w2_lower_limit_calo{{i+1}} => X"{{ o.phiW2LowerLimit|X04 }}",
        {%- endif %}        
        {%- if o.hasIsolation is not none %}
        iso_lut_calo{{i+1}} => X"{{ o.isolationLUT|X01 }}",
        {%- endif %}        
      {%- else %}        
-- calo obj cuts
        {%- if o.hasSlice is not none %}
        calo_object_low => {{ o.sliceLow }}, 
        calo_object_high => {{ o.sliceHigh }}, 
        {%- endif %}        
        {%- if o.operator == False %}
        pt_ge_mode_calo => {{ o.operator }}, 
        {%- endif %}        
        obj_type_calo => {{ o.type|upper }}_TYPE,
        pt_threshold_calo => X"{{ o.threshold|X04 }}",
        {%- if o.etaNrCuts > 0 %}
        nr_eta_windows_calo => {{ o.etaNrCuts }},
        {%- endif %}        
        {%- for j in range(0,(o.etaNrCuts)) %}
          {%- if o.etaNrCuts > j %}
        eta_w{{j+1}}_upper_limit_calo => X"{{ o.etaUpperLimit[j]|X04 }}", 
        eta_w{{j+1}}_lower_limit_calo => X"{{ o.etaLowerLimit[j]|X04 }}",
          {%- endif %}        
        {%- endfor %}
        {%- if o.phiNrCuts > 0 %}
        phi_full_range_calo => {{ o.phiFullRange }}, 
        phi_w1_upper_limit_calo => X"{{ o.phiW1UpperLimit|X04 }}", 
        phi_w1_lower_limit_calo => X"{{ o.phiW1LowerLimit|X04 }}",
        {%- endif %}        
        {%- if o.phiNrCuts > 1 %}
        phi_w2_ignore_calo => {{ o.phiW2Ignore }}, 
        phi_w2_upper_limit_calo => X"{{ o.phiW2UpperLimit|X04 }}", 
        phi_w2_lower_limit_calo => X"{{ o.phiW2LowerLimit|X04 }}",
        {%- endif %}        
        {%- if o.hasIsolation is not none %}
        iso_lut_calo => X"{{ o.isolationLUT|X01 }}",
        {%- endif %}        
      {%- endif %}        
    {%- endfor %}
  {%- if condition.objects[1].is_esums_type %}
      {%- set o2 = condition.objects[1] %}
-- esums obj cuts
      {%- if o2.operator == False %}
        et_ge_mode_esums => {{ o2.operator }}, 
      {%- endif %}        
        obj_type_esums => {{ o2.type|upper }}_TYPE,
        et_threshold_esums => X"{{ o2.threshold|X04 }}",
      {%- if o2.phiNrCuts > 0 %}
        phi_full_range_esums => {{ o2.phiFullRange }}, 
        phi_w1_upper_limit_esums => X"{{ o2.phiW1UpperLimit|X04 }}", 
        phi_w1_lower_limit_esums => X"{{ o2.phiW1LowerLimit|X04 }}",
      {%- endif %}        
      {%- if o2.phiNrCuts > 1 %}
        phi_w2_ignore_esums => {{ o2.phiW2Ignore }}, 
        phi_w2_upper_limit_esums => X"{{ o2.phiW2UpperLimit|X04 }}", 
        phi_w2_lower_limit_esums => X"{{ o2.phiW2LowerLimit|X04 }}",
      {%- endif %}        
  {%- endif %}        
  {%- if condition.objects[1].is_muon_type %}
      {%- set o2 = condition.objects[1] %}
-- muon obj cuts
      {%- if o2.hasSlice is not none %}
        muon_object_low => {{ o2.sliceLow }}, 
        muon_object_high => {{ o2.sliceHigh }}, 
      {%- endif %}        
      {%- if o2.operator == False %}
        pt_ge_mode_muon => {{ o2.operator }}, 
      {%- endif %}        
        pt_threshold_muon => X"{{ o2.threshold|X04 }}",
      {%- if o2.etaNrCuts > 0 %}
        nr_eta_windows_muon => {{ o2.etaNrCuts }},
      {%- endif %}        
      {%- for j in range(0,(o2.etaNrCuts)) %}
        {%- if o2.etaNrCuts > j %}
        eta_w{{j+1}}_upper_limit_muon => X"{{ o2.etaUpperLimit[j]|X04 }}", 
        eta_w{{j+1}}_lower_limit_muon => X"{{ o2.etaLowerLimit[j]|X04 }}",
        {%- endif %}        
      {%- endfor %}
      {%- if o2.phiNrCuts > 0 %}
        phi_full_range_muon => {{ o2.phiFullRange }}, 
        phi_w1_upper_limit_muon => X"{{ o2.phiW1UpperLimit|X04 }}", 
        phi_w1_lower_limit_muon => X"{{ o2.phiW1LowerLimit|X04 }}",
      {%- endif %}        
      {%- if o2.phiNrCuts > 1 %}
        phi_w2_ignore_muon => {{ o2.phiW2Ignore }}, 
        phi_w2_upper_limit_muon => X"{{ o2.phiW2UpperLimit|X04 }}", 
        phi_w2_lower_limit_muon => X"{{ o2.phiW2LowerLimit|X04 }}",
      {%- endif %}        
      {%- if o2.hasCharge is not none %}
        requested_charge_muon => "{{ o2.charge }}",
      {%- endif %}        
      {%- if o2.hasQuality is not none %}
        qual_lut_muon => X"{{ o2.qualityLUT|X04 }}",
      {%- endif %}        
      {%- if o2.hasIsolation is not none %}
        iso_lut_muon => X"{{ o2.isolationLUT|X01 }}",
      {%- endif %}        
      {%- if o2.hasUpt is not none %}
        upt_cut_muon => {{ o2.hasUpt|vhdl_bool }}, 
        upt_upper_limit_muon => X"{{ o2.uptUpperLimit|X04 }}", 
        upt_lower_limit_muon => X"{{ o2.uptLowerLimit|X04 }}", 
      {%- endif %}        
      {%- if o2.hasImpactParameter is not none %}
        ip_lut_muon => X"{{ o2.impactParameterLUT|X01 }}",
      {%- endif %}
  {%- endif %}
  {%- block correlation_cuts %}
      {%- set o1 = condition.objects[0] %}
      {%- set o2 = condition.objects[1] %}
-- correlation cuts
    {%- if (condition.hasMass is not none) and (condition.mass.type == condition.mass.InvariantMassDeltaRType) %}
        mass_cut => {{ condition.mass.enabled }}, 
        mass_type => INVARIANT_MASS_DIV_DR_TYPE,
    {%- else %}
        {%- if condition.hasDeltaEta is not none %}
        deta_cut => {{ condition.deltaEta.enabled }}, 
        {%- endif %}        
        {%- if condition.hasDeltaPhi is not none %}
        dphi_cut => {{ condition.deltaPhi.enabled }}, 
        {%- endif %}        
        {%- if condition.hasDeltaR is not none %}
        dr_cut => {{ condition.deltaR.enabled }}, 
        {%- endif %}        
        {%- if condition.hasMass is not none %}
        mass_cut => {{ condition.mass.enabled }}, 
        mass_type => INVARIANT_MASS_TYPE, 
        {%- endif %}        
        {%- if condition.hasTwoBodyPt is not none %}
        twobody_pt_cut => {{ condition.twoBodyPt.enabled }}, 
        {%- endif %}        
    {%- endif %}        
    {%- if (condition.hasMass is not none) or (condition.hasTwoBodyPt is not none) %}
        pt1_width => {{ o1.type|upper }}_PT_VECTOR_WIDTH, 
        pt2_width => {{ o2.type|upper }}_PT_VECTOR_WIDTH, 
    {%- endif %}        
    {%- if (condition.hasMass is not none) and (condition.mass.type == condition.mass.InvariantMassDeltaRType) %}
        mass_cosh_cos_precision => {{ o1.type|upper }}_{{ o2.type|upper }}_COSH_COS_PRECISION, 
        cosh_cos_width => {{ o1.type|upper }}_{{ o2.type|upper }}_COSH_COS_VECTOR_WIDTH,
        mass_div_dr_vector_width => {{ o1.type|upper }}_{{ o2.type|upper }}_MASS_DIV_DR_VECTOR_WIDTH,
        mass_div_dr_threshold => X"{{ condition.mass.lower|X21 }}",
    {%- else %}
        {%- if condition.hasDeltaEta is not none %}
        diff_eta_upper_limit_vector => X"{{ condition.deltaEta.upper|X08 }}", 
        diff_eta_lower_limit_vector => X"{{ condition.deltaEta.lower|X08 }}",
        {%- endif %}        
        {%- if condition.hasDeltaPhi is not none %}
        diff_phi_upper_limit_vector => X"{{ condition.deltaPhi.upper|X08 }}", 
        diff_phi_lower_limit_vector => X"{{ condition.deltaPhi.lower|X08 }}",
        {%- endif %}        
        {%- if condition.hasDeltaR is not none %}
        dr_upper_limit_vector => X"{{ condition.deltaR.upper|X16 }}", 
        dr_lower_limit_vector => X"{{ condition.deltaR.lower|X16 }}",
        {%- endif %}        
        {%- if condition.hasMass is not none %}
        mass_cosh_cos_precision => {{ o1.type|upper }}_{{ o2.type|upper }}_COSH_COS_PRECISION, 
        cosh_cos_width => {{ o1.type|upper }}_{{ o2.type|upper }}_COSH_COS_VECTOR_WIDTH,
        mass_upper_limit => X"{{ condition.mass.upper|X16 }}",
        mass_lower_limit => X"{{ condition.mass.lower|X16 }}",
        {%- endif %}        
        {%- if condition.hasTwoBodyPt is not none %}
        pt_sq_threshold_vector => X"{{ condition.twoBodyPt.threshold|X16 }}", 
          {%- if o2.is_calo_type %}
        sin_cos_width => CALO_SIN_COS_VECTOR_WIDTH, 
          {%- elif o2.is_muon_type %}
        sin_cos_width => MUON_SIN_COS_VECTOR_WIDTH, 
          {%- endif %}        
        pt_sq_sin_cos_precision => {{ o1.type|upper }}_{{ o2.type|upper }}_SIN_COS_PRECISION,
        {%- endif %}        
    {%- endif %}        
  {%- endblock correlation_cuts %}
  {%- block generic_end %}
  {%- endblock generic_end %}
    )
    port map(
  {%- block port %}
  {%- endblock port %}
    );
{%- endblock calo_correlation_conditions_base %}
{# eof #}
