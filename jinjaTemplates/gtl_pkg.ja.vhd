--------------------------------------------------------------------------------
--
--
--
-- This file was generated by L1 Trigger Menu Writer on 2014-02-27T11:06:28
-- Do not edit this file, it may result in misbehavior and/or inconsistency!
--
--
--
--------------------------------------------------------------------------------
-- Synthesizer : ISE 14.6
-- Platform    : Linux Ubuntu 10.04
-- Targets     : Synthese
--------------------------------------------------------------------------------
-- This work is held in copyright as an unpublished work by HEPHY (Institute
-- of High Energy Physics) All rights reserved.  This work may not be used
-- except by authorized licensees of HEPHY. This work is the
-- confidential information of HEPHY.
--------------------------------------------------------------------------------
-- $HeadURL: svn://heros.hephy.at/GlobalTriggerUpgrade/software/l1triggermenu/compiler/trunk/templates/mp7/gtl_pkg.vhd $
-- $Date: 2015-04-28 13:46:23 +0200 (Tue, 28 Apr 2015) $
-- $Author: bergauer $
-- $Revision: 3858 $
--------------------------------------------------------------------------------

-- HB 2015-04-28: inserted records for energy summary objects and calorimeter conditions version 2 (calo_conditions_v2.vhd)
-- HB 2014-09-09: GTL and FDL firmware major, minor and revision versions moved to gt_mp7_core_pkg.vhd (GTL_FW_MAJOR_VERSION, etc.)
--                for creating a tag name by a script independent from L1Menu.

-- ========================================================
-- from TME:

-- Unique ID of L1 Trigger Menu:
-- {L1TMenuUUID}

-- Name of L1 Trigger Menu:
-- {L1TMenuName}

-- Version of L1 Trigger Menu Compiler:
-- v{L1TMCompilerVersionMajor}.{L1TMCompilerVersionMinor}.{L1TMCompilerVersionRevision}

-- Desription:
-- Package for constant and type definitions of GTL firmware in Global Trigger Upgrade system.

-- ========================================================

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

use work.lhc_data_pkg.all;
use work.math_pkg.all;
use work.gt_mp7_core_pkg.all;

package gtl_pkg is

-- Boards
constant MAX_NR_GT_BOARDS : positive := {MaxGtBoards:d}; -- written by TME ---real available boards
constant USED_GT_BOARDS : positive := {UsedGtBoards:d}; -- written by TME ---needed by the menu

-- Algorithms
constant NR_ALGOS : positive := {NrAlgorithms:d}; -- number of algorithmns (min. 32 for FDL registers width !!!) - written by TME

-- ==== FDL definitions - begin ============================================================
-- Definitions for prescalers (for FDL !)
constant PRESCALER_COUNTER_WIDTH : integer := 24;
type prescale_factor_array is array (NR_ALGOS-1 downto 0) of std_logic_vector(31 downto 0); -- same width as PCIe data
constant PRESCALE_FACTOR_INIT : ipb_regs_array(0 to MAX_NR_ALGOS-1) := ({AssignmentPrescaleFactors} others => X"00000001"); -- written by TME

-- Definitions for rate counters
constant RATE_COUNTER_WIDTH : integer := 32;
type rate_counter_array is array (NR_ALGOS-1 downto 0) of std_logic_vector(RATE_COUNTER_WIDTH-1 downto 0);

-- HB 2014-02-28: changed vector length of init values for finor- and veto-maks, because of min. 32 bits for register
constant MASKS_INIT : ipb_regs_array(0 to MAX_NR_ALGOS-1) := ({AssignmentFinorVetoMasks} others => X"00000001"); --Finor and veto masks registers (bit 0 = finor, bit 1 = veto)
-- ==== FDL definitions - end ============================================================

-- ==== Versions - begin ============================================================
-- HB 2014-02-28: changed to UUID generated by TME (128 bits = 4 x 32 bits)
constant L1TM_UID : std_logic_vector(127 downto 0) := X"{L1TMenuUUIDHex:032X}";
-- HB 2014-05-21: L1TM_NAME generated by TME (1024 bits = 32 x 32 bits)
-- has to be interpreted as 128 ASCII-characters (from right to left)
constant L1TM_NAME : std_logic_vector(128*8-1 downto 0) := X"{L1TMenuNameHex:0256X}";
-- Unique fireware instance ID generated by the compiler, provided to keep track of multiple menu implementations.
constant L1TM_FW_UID : std_logic_vector(127 downto 0) := X"{L1TMenuFirmwareUUIDHex:032X}";

-- Trigger Menu Editor software version - written by TME
constant L1TM_COMPILER_MAJOR_VERSION      : integer range 0 to 255 := {L1TMCompilerVersionMajor:d};
constant L1TM_COMPILER_MINOR_VERSION      : integer range 0 to 255 := {L1TMCompilerVersionMinor:d};
constant L1TM_COMPILER_REV_VERSION        : integer range 0 to 255 := {L1TMCompilerVersionRevision:d};
constant L1TM_COMPILER_VERSION : std_logic_vector(31 downto 0) := X"00" &
           std_logic_vector(to_unsigned(L1TM_COMPILER_MAJOR_VERSION, 8)) &
           std_logic_vector(to_unsigned(L1TM_COMPILER_MINOR_VERSION, 8)) &
           std_logic_vector(to_unsigned(L1TM_COMPILER_REV_VERSION, 8));

-- HB 2014-09-09: GTL and FDL firmware major, minor and revision versions moved to gt_mp7_core_pkg.vhd (GTL_FW_MAJOR_VERSION, etc.)
--                for creating a tag name by a script independent from L1Menu.
-- GTL firmware (fix part) version
-- constant GTL_FW_MAJOR_VERSION      : integer range 0 to 255 := 1;
-- constant GTL_FW_MINOR_VERSION      : integer range 0 to 255 := 2;
-- constant GTL_FW_REV_VERSION        : integer range 0 to 255 := 0;
constant GTL_FW_VERSION : std_logic_vector(31 downto 0) := X"00" &
           std_logic_vector(to_unsigned(GTL_FW_MAJOR_VERSION, 8)) &
           std_logic_vector(to_unsigned(GTL_FW_MINOR_VERSION, 8)) &
           std_logic_vector(to_unsigned(GTL_FW_REV_VERSION, 8));

-- FDL firmware version
-- constant FDL_FW_MAJOR_VERSION      : integer range 0 to 255 := 2;
-- constant FDL_FW_MINOR_VERSION      : integer range 0 to 255 := 1;
-- constant FDL_FW_REV_VERSION        : integer range 0 to 255 := 0;
constant FDL_FW_VERSION : std_logic_vector(31 downto 0) := X"00" &
           std_logic_vector(to_unsigned(FDL_FW_MAJOR_VERSION, 8)) &
           std_logic_vector(to_unsigned(FDL_FW_MINOR_VERSION, 8)) &
           std_logic_vector(to_unsigned(FDL_FW_REV_VERSION, 8));

-- ==== Versions - end ============================================================

-- ==== MUONs - begin ============================================================
-- MUONs
constant NR_MUON_TEMPLATES : positive range 1 to 4 := 4; -- number of max. templates for muon conditions
constant NR_MUON_OBJECTS : positive := MUON_ARRAY_LENGTH; -- from lhc_data_pkg.vhd
constant MAX_MUON_BITS : positive := MUON_DATA_WIDTH; -- from lhc_data_pkg.vhd

type d_s_i_muon_record is record
    charge_high, charge_low, iso_high, iso_low, eta_high, eta_low, qual_high, qual_low, pt_high, pt_low, phi_high, phi_low : natural range MAX_MUON_BITS-1 downto 0;
end record d_s_i_muon_record;

constant d_s_i_muon : d_s_i_muon_record := (35,34,33,32,31,23,22,19,18,10,9,0);

type muon_objects_array is array (natural range <>) of std_logic_vector(MAX_MUON_BITS-1 downto 0);
constant MAX_MUON_TEMPLATES_BITS : positive range 1 to MUON_DATA_WIDTH := 16;
type muon_templates_array is array (1 to NR_MUON_TEMPLATES) of std_logic_vector(MAX_MUON_TEMPLATES_BITS-1 downto 0);
-- type muon_templates_quality_array is array (1 to NR_MUON_TEMPLATES) of std_logic_vector((2**(qual_high-qual_low+1))-1 downto 0);
type muon_templates_quality_array is array (1 to NR_MUON_TEMPLATES) of std_logic_vector(15 downto 0);
-- type muon_templates_iso_array is array (1 to NR_MUON_TEMPLATES) of std_logic_vector((2**(iso_high-iso_low+1))-1 downto 0);
type muon_templates_iso_array is array (1 to NR_MUON_TEMPLATES) of std_logic_vector(3 downto 0);
type muon_templates_boolean_array is array (1 to NR_MUON_TEMPLATES) of boolean;
type muon_templates_string_array is array (1 to NR_MUON_TEMPLATES) of string(1 to 3);

-- HB 2014-04-15: types for muon_charge_correlations.vhd
type muon_charcorr_double_array is array (0 to NR_MUON_OBJECTS-1, 0 to NR_MUON_OBJECTS-1) of std_logic;
type muon_charcorr_triple_array is array (0 to NR_MUON_OBJECTS-1, 0 to NR_MUON_OBJECTS-1, 0 to NR_MUON_OBJECTS-1) of std_logic;
type muon_charcorr_quad_array is array (0 to NR_MUON_OBJECTS-1, 0 to NR_MUON_OBJECTS-1, 0 to NR_MUON_OBJECTS-1, 0 to NR_MUON_OBJECTS-1) of std_logic;
-- ==== MUONs - end ============================================================

-- ==== CALOs - begin ============================================================
-- CALOs
constant NR_CALO_TEMPLATES : positive range 1 to 4 := 4; -- number of max. templates for calorimeter conditions
constant NR_EG_OBJECTS : positive := EG_ARRAY_LENGTH; -- number eg objects, from lhc_data_pkg.vhd
constant NR_JET_OBJECTS : positive := JET_ARRAY_LENGTH; -- number jet objects, from lhc_data_pkg.vhd
constant NR_TAU_OBJECTS : positive := TAU_ARRAY_LENGTH; -- number tau objects, from lhc_data_pkg.vhd
constant MAX_CALO_BITS : positive := max(EG_DATA_WIDTH, JET_DATA_WIDTH, TAU_DATA_WIDTH);

-- d_s_i_calo_record used for calo_conditions.vhd
type d_s_i_calo_record is record
    phi_high, phi_low, eta_high, eta_low, et_high, et_low : natural range MAX_CALO_BITS-1 downto 0;
end record d_s_i_calo_record;

constant d_s_i_eg : d_s_i_calo_record := (24,17,16,9,8,0);
constant d_s_i_jet : d_s_i_calo_record := (26,19,18,11,10,0);
constant d_s_i_tau : d_s_i_calo_record := (24,17,16,9,8,0);

-- HB 2015-02-16: changed for different "calo_records", each for eg, jet and tau.
-- different records used for calo_conditions_v2.vhd
-- used natural instead of string for object types
constant EG_TYPE : natural range 0 to 2 := 0;
constant JET_TYPE : natural range 0 to 2 := 1;
constant TAU_TYPE : natural range 0 to 2 := 2;

type d_s_i_eg_record is record
    iso_high, iso_low, phi_high, phi_low, eta_high, eta_low, et_high, et_low : natural range MAX_CALO_BITS-1 downto 0;
end record d_s_i_eg_record;

type d_s_i_jet_record is record
    phi_high, phi_low, eta_high, eta_low, et_high, et_low : natural range MAX_CALO_BITS-1 downto 0;
end record d_s_i_jet_record;

type d_s_i_tau_record is record
    iso_high, iso_low, phi_high, phi_low, eta_high, eta_low, et_high, et_low : natural range MAX_CALO_BITS-1 downto 0;
end record d_s_i_tau_record;

constant D_S_I_EG_V2: d_s_i_eg_record := (26,25,24,17,16,9,8,0);
constant D_S_I_JET_V2 : d_s_i_jet_record := (26,19,18,11,10,0);
constant D_S_I_TAU_V2 : d_s_i_tau_record := (26,25,24,17,16,9,8,0);

type calo_objects_array is array (natural range <>) of std_logic_vector(MAX_CALO_BITS-1 downto 0);
constant MAX_CALO_TEMPLATES_BITS : positive range 1 to MAX_CALO_BITS := 16;
type calo_templates_array is array (1 to NR_CALO_TEMPLATES) of std_logic_vector(MAX_CALO_TEMPLATES_BITS-1 downto 0);
type calo_templates_boolean_array is array (1 to NR_CALO_TEMPLATES) of boolean;

-- ESUMs
constant MAX_ESUMS_BITS_TEMP : positive := max(ETT_DATA_WIDTH, HT_DATA_WIDTH, ETM_DATA_WIDTH);
constant MAX_ESUMS_BITS : positive := max(MAX_ESUMS_BITS_TEMP, HTM_DATA_WIDTH);
constant MAX_ESUMS_TEMPLATES_BITS : positive range 1 to MAX_ESUMS_BITS := 16;

constant ETT_TYPE : natural range 0 to 3 := 0;
constant HTT_TYPE : natural range 0 to 3 := 1;
constant ETM_TYPE : natural range 0 to 3 := 2;
constant HTM_TYPE : natural range 0 to 3 := 3;

type d_s_i_ett_record is record
    et_high, et_low : natural range MAX_ESUMS_BITS-1 downto 0;
end record d_s_i_ett_record;

type d_s_i_htt_record is record
    et_high, et_low : natural range MAX_ESUMS_BITS-1 downto 0;
end record d_s_i_htt_record;

type d_s_i_etm_record is record
    phi_high, phi_low, et_high, et_low : natural range MAX_ESUMS_BITS-1 downto 0;
end record d_s_i_etm_record;

type d_s_i_htm_record is record
    phi_high, phi_low, et_high, et_low : natural range MAX_ESUMS_BITS-1 downto 0;
end record d_s_i_htm_record;

constant D_S_I_ETT : d_s_i_ett_record := (11,0);
constant D_S_I_HTT : d_s_i_htt_record := (11,0);
constant D_S_I_ETM : d_s_i_etm_record := (19,12,11,0);
constant D_S_I_HTM : d_s_i_htm_record := (19,12,11,0);
-- ==== CALOs - end ============================================================
-- Correlations

-- Subtractors
constant MAX_DIFF_BITS : positive := 16;
type diff_inputs_array is array (natural range <>) of std_logic_vector(MAX_DIFF_BITS-1 downto 0);
type diff_2dim_integer_array is array (natural range <>, natural range <>) of integer;

-- "External conditions" (former "Technical Triggers" and "External Algorithms") definitions
constant NR_EXTERNAL_CONDITIONS : positive := EXTERNAL_CONDITIONS_DATA_WIDTH; -- number of "External conditions" inputs (proposed max. NR_EXTERNAL_CONDITIONS = 256), from lhc_data_pkg.vhd

-- Parameter for sub_phi_obj_vs_obj instances of wsc conditions

constant PHI_BINS_DIV2_eg : positive := 72; -- number of phi bins (144 for calos) divided by 2
constant PHI_BINS_DIV2_jet : positive := 72;
constant PHI_BINS_DIV2_tau : positive := 72;
constant PHI_BINS_DIV2_muon : positive := 288; -- number of phi bins (576 for calos) divided by 2

-- Parameter for sub_eta_obj_vs_obj and sub_phi_obj_vs_obj instances of correlation conditions
constant ETA_WIDTH_eg_jet : positive := max((D_S_I_EG_V2.eta_high-D_S_I_EG_V2.eta_low+1), (D_S_I_JET_V2.eta_high-D_S_I_JET_V2.eta_low+1));
constant ETA_WIDTH_eg_tau : positive := max((D_S_I_EG_V2.eta_high-D_S_I_EG_V2.eta_low+1), (D_S_I_TAU_V2.eta_high-D_S_I_TAU_V2.eta_low+1));
constant ETA_WIDTH_jet_tau : positive := max((D_S_I_TAU_V2.eta_high-D_S_I_TAU_V2.eta_low+1), (D_S_I_JET_V2.eta_high-D_S_I_JET_V2.eta_low+1));
constant ETA_WIDTH_eg_muon : positive := (max((D_S_I_EG_V2.eta_high-D_S_I_EG_V2.eta_low+1), (d_s_i_muon.eta_high-d_s_i_muon.eta_low+1)))+2; -- common eta width for calo and muon
constant ETA_WIDTH_jet_muon : positive := (max((D_S_I_JET_V2.eta_high-D_S_I_JET_V2.eta_low+1), (d_s_i_muon.eta_high-d_s_i_muon.eta_low+1)))+2;
constant ETA_WIDTH_tau_muon : positive := (max((D_S_I_TAU_V2.eta_high-D_S_I_TAU_V2.eta_low+1), (d_s_i_muon.eta_high-d_s_i_muon.eta_low+1)))+2;

constant PHI_WIDTH_eg_jet : positive := max((D_S_I_EG_V2.phi_high-D_S_I_EG_V2.phi_low+1), (D_S_I_JET_V2.phi_high-D_S_I_JET_V2.phi_low+1));
constant PHI_WIDTH_eg_tau : positive := max((D_S_I_EG_V2.phi_high-D_S_I_EG_V2.phi_low+1), (D_S_I_TAU_V2.phi_high-D_S_I_TAU_V2.phi_low+1));
constant PHI_WIDTH_jet_tau : positive := max((D_S_I_TAU_V2.phi_high-D_S_I_TAU_V2.phi_low+1), (D_S_I_JET_V2.phi_high-D_S_I_JET_V2.phi_low+1));
constant PHI_WIDTH_eg_etm : positive := max((D_S_I_EG_V2.phi_high-D_S_I_EG_V2.phi_low+1), (D_S_I_ETM.phi_high-D_S_I_ETM.phi_low+1));
constant PHI_WIDTH_eg_htm : positive := max((D_S_I_EG_V2.phi_high-D_S_I_EG_V2.phi_low+1), (D_S_I_HTM.phi_high-D_S_I_HTM.phi_low+1));
constant PHI_WIDTH_jet_etm : positive := max((D_S_I_JET_V2.phi_high-D_S_I_JET_V2.phi_low+1), (D_S_I_ETM.phi_high-D_S_I_ETM.phi_low+1));
constant PHI_WIDTH_jet_htm : positive := max((D_S_I_JET_V2.phi_high-D_S_I_JET_V2.phi_low+1), (D_S_I_HTM.phi_high-D_S_I_HTM.phi_low+1));
constant PHI_WIDTH_tau_etm : positive := max((D_S_I_TAU_V2.phi_high-D_S_I_TAU_V2.phi_low+1), (D_S_I_ETM.phi_high-D_S_I_ETM.phi_low+1));
constant PHI_WIDTH_tau_htm : positive := max((D_S_I_TAU_V2.phi_high-D_S_I_TAU_V2.phi_low+1), (D_S_I_HTM.phi_high-D_S_I_HTM.phi_low+1));
constant PHI_WIDTH_eg_muon : positive := (max((D_S_I_EG_V2.phi_high-D_S_I_EG_V2.phi_low+1), (d_s_i_muon.phi_high-d_s_i_muon.phi_low+1)))+1; ---- common phi width for calo and muon
constant PHI_WIDTH_jet_muon : positive := (max((D_S_I_JET_V2.phi_high-D_S_I_JET_V2.phi_low+1), (d_s_i_muon.phi_high-d_s_i_muon.phi_low+1)))+1;
constant PHI_WIDTH_tau_muon : positive := (max((D_S_I_TAU_V2.phi_high-D_S_I_TAU_V2.phi_low+1), (d_s_i_muon.phi_high-d_s_i_muon.phi_low+1)))+1;
constant PHI_WIDTH_muon_etm : positive := (max((D_S_I_ETM.phi_high-D_S_I_ETM.phi_low+1), (d_s_i_muon.phi_high-d_s_i_muon.phi_low+1)))+1;
constant PHI_WIDTH_muon_htm : positive := (max((D_S_I_HTM.phi_high-D_S_I_HTM.phi_low+1), (d_s_i_muon.phi_high-d_s_i_muon.phi_low+1)))+1;

constant PHI_BINS_DIV2_eg_jet : positive := 72;
constant PHI_BINS_DIV2_eg_tau : positive := 72;
constant PHI_BINS_DIV2_jet_tau : positive := 72;
constant PHI_BINS_DIV2_eg_etm : positive := 72;
constant PHI_BINS_DIV2_eg_htm : positive := 72;
constant PHI_BINS_DIV2_jet_etm : positive := 72;
constant PHI_BINS_DIV2_jet_htm : positive := 72;
constant PHI_BINS_DIV2_tau_etm : positive := 72;
constant PHI_BINS_DIV2_tau_htm : positive := 72;
constant PHI_BINS_DIV2_eg_muon : positive := 576; -- number of "common" phi bins (11 bits => 1142 for calo and muon) divided by 2
constant PHI_BINS_DIV2_jet_muon : positive := 576;
constant PHI_BINS_DIV2_tau_muon : positive := 576;
constant PHI_BINS_DIV2_muon_etm : positive := 576;
constant PHI_BINS_DIV2_muon_htm : positive := 576;

end package;
